========================
CODE SNIPPETS
========================
TITLE: Project Setup and Execution
DESCRIPTION: Provides commands to install dependencies and start the Nest.js development server.

SOURCE: https://github.com/vercel/ai/blob/main/examples/nest/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
```

LANGUAGE: sh
CODE:
```
pnpm run start:dev
```

----------------------------------------

TITLE: Get started with Gemini 2.5 Guide
DESCRIPTION: Get started with Gemini 2.5 using the AI SDK.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/index.mdx#_snippet_4

LANGUAGE: markdown
CODE:
```
title: Get started with Gemini 2.5
description: Get started with Gemini 2.5 using the AI SDK.
href: /cookbook/guides/gemini-2-5
```

----------------------------------------

TITLE: Setup and Basic Example Usage
DESCRIPTION: Instructions for setting up the environment, installing dependencies, and running basic AI Core examples using TypeScript.

SOURCE: https://github.com/vercel/ai/blob/main/examples/ai-core/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
OPENAI_API_API_KEY="YOUR_OPENAI_API_KEY"
...
```

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
```

LANGUAGE: sh
CODE:
```
pnpm tsx src/path/to/example.ts
```

----------------------------------------

TITLE: Local Setup and Running Instructions
DESCRIPTION: Steps to set up and run the AI chat bot example locally. This involves obtaining an OpenAI API key, setting environment variables, installing dependencies, and starting the development server.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-langchain/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
# 1. Sign up at OpenAI's Developer Platform
# 2. Create an API KEY in OpenAI's dashboard
# 3. Set OPENAI_API_KEY environment variable in .env.local
# 4. Install dependencies: pnpm install
# 5. Launch development server: pnpm dev
```

----------------------------------------

TITLE: Get started with OpenAI o1 Guide
DESCRIPTION: Get started with OpenAI o1 using the AI SDK.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/index.mdx#_snippet_3

LANGUAGE: markdown
CODE:
```
title: Get started with OpenAI o1
description: Get started with OpenAI o1 using the AI SDK.
href: /cookbook/guides/o1
```

----------------------------------------

TITLE: Local Setup and Running the Example
DESCRIPTION: Instructions for setting up the Next.js AI chatbot example locally. This involves obtaining an OpenAI API key, setting it as an environment variable, installing dependencies, and starting the development server.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-openai-pages/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
# 1. Sign up at OpenAI's Developer Platform.
# 2. Create an API KEY in OpenAI's dashboard.
# 3. Set the OPENAI_API_KEY environment variable in a .env.local file.
# 4. Install dependencies:
pnpm install
# 5. Launch the development server:
pnpm dev
```

----------------------------------------

TITLE: Project Setup and Execution
DESCRIPTION: Provides the commands to install dependencies, build the project, and run the Fastify server.

SOURCE: https://github.com/vercel/ai/blob/main/examples/fastify/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
pnpm dev
```

----------------------------------------

TITLE: Get started with Llama 3.1 Guide
DESCRIPTION: Get started with Llama 3.1 using the AI SDK.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/index.mdx#_snippet_2

LANGUAGE: markdown
CODE:
```
title: Get started with Llama 3.1
description: Get started with Llama 3.1 using the AI SDK.
href: /cookbook/guides/llama-3_1
```

----------------------------------------

TITLE: Project Setup and Execution
DESCRIPTION: Provides the commands to install dependencies, build the project, and run the development server.

SOURCE: https://github.com/vercel/ai/blob/main/examples/hono/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
pnpm dev
```

----------------------------------------

TITLE: Development Setup: Running the Example
DESCRIPTION: Instructions for setting up and running the project's example application, which involves navigating to the example directory, configuring environment variables (like API keys), and starting the development servers for both Angular and Express.

SOURCE: https://github.com/vercel/ai/blob/main/packages/angular/README.md#_snippet_18

LANGUAGE: bash
CODE:
```
# Navigate to example
cd examples/angular-chat

# Set up environment
echo "OPENAI_API_KEY=your_key_here" > .env

# Start development (Angular + Express)
pnpm start

Starts:

- Angular dev server: `http://localhost:4200`
- Express API server: `http://localhost:3000`
- Proxy routes `/api/*` to Express
```

----------------------------------------

TITLE: Setup Node.js Application
DESCRIPTION: Commands to create a new Node.js project directory, initialize package.json, and install necessary dependencies including the AI SDK, OpenAI provider, and development tools.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/06-nodejs.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
mkdir my-ai-app
cd my-ai-app
pnpm init
pnpm add ai@beta @ai-sdk/openai@beta zod dotenv
pnpm add -D @types/node tsx typescript
```

----------------------------------------

TITLE: Run SvelteKit OpenAI Example
DESCRIPTION: Starts the development server for the SvelteKit OpenAI example using pnpm. This command assumes dependencies are installed and the environment variable is set.

SOURCE: https://github.com/vercel/ai/blob/main/examples/sveltekit-openai/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm -F sveltekit-openai dev
```

----------------------------------------

TITLE: Install AI SDK and Anthropic Provider
DESCRIPTION: Installs the necessary AI SDK and Anthropic provider packages using pnpm.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/05-computer-use.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm add ai @ai-sdk/anthropic
```

----------------------------------------

TITLE: Local Setup and Running the Example
DESCRIPTION: Steps to set up the project locally, including obtaining an OpenAI API key, configuring environment variables, installing dependencies, and running the development server.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-openai-upstash-rate-limits/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
# 1. Sign up at OpenAI's Developer Platform.
# 2. Create an API KEY in OpenAI's dashboard.
# 3. Set the OPENAI_API_KEY environment variable in a .env.local file.
# 4. Install dependencies: pnpm install
# 5. Run the development server: pnpm dev
```

----------------------------------------

TITLE: Project Setup and Execution
DESCRIPTION: Install dependencies, build the project, and run the Node.js HTTP server.

SOURCE: https://github.com/vercel/ai/blob/main/examples/node-http-server/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Project Setup and Execution
DESCRIPTION: Provides the commands to install dependencies, build the project, and run the development server.

SOURCE: https://github.com/vercel/ai/blob/main/examples/express/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
pnpm dev
```

----------------------------------------

TITLE: Python Environment Setup and Dependency Installation
DESCRIPTION: Commands to set up a Python virtual environment and install the necessary dependencies for the FastAPI server. This ensures that the Python backend runs correctly.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-fastapi/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
virtualenv venv
source venv/bin/activate
pip install -r requirements.txt
```

----------------------------------------

TITLE: Install Dependencies and Build
DESCRIPTION: Installs project dependencies and builds the SvelteKit application. This is a prerequisite for running the example.

SOURCE: https://github.com/vercel/ai/blob/main/examples/sveltekit-openai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm install
pnpm build
```

----------------------------------------

TITLE: Install AI SDK and DeepSeek Provider
DESCRIPTION: Installs the necessary AI SDK packages and the DeepSeek provider using pnpm.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/25-r1.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
pnpm install ai @ai-sdk/deepseek @ai-sdk/react
```

----------------------------------------

TITLE: Computer Use Implementation Considerations
DESCRIPTION: Key considerations for implementing Computer Use tools in the AI SDK, including environment setup, core functionality, and safety measures.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/05-computer-use.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Implementation Considerations:
  1. Set up a controlled environment for Computer Use execution.
  2. Implement core functionality like mouse control and keyboard input.
  3. Handle screenshot capture and processing.
  4. Set up rules and limits for how Claude can interact with your system.

Recommended Approach:
  - Utilize Anthropic's reference implementation for a containerized environment, Python tool implementations, an agent loop, and a web interface.
```

----------------------------------------

TITLE: Install AI SDK and Google Provider
DESCRIPTION: Provides the command to install the AI SDK and the Google Generative AI provider using pnpm.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/17-gemini-2-5.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
pnpm install ai @ai-sdk/google
```

----------------------------------------

TITLE: Install Project Dependencies and Configure Environment
DESCRIPTION: This snippet outlines the initial setup steps for the project. It includes commands to install all required dependencies using pnpm and to set up the local environment variables by copying the example file. Users are instructed to then populate the .env.local file with their specific configuration values.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/next-openai-kasada-bot-protection/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
pnpm i
cp .env.local.example .env.local # and fill in the required values
```

----------------------------------------

TITLE: Install Dependencies and Build AI SDK Project
DESCRIPTION: These commands are necessary to prepare the AI SDK repository for development or execution. `pnpm install` fetches all required project dependencies, while `pnpm build` compiles the project source code.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/ai-core/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
```

----------------------------------------

TITLE: Install Dependencies and Build Project
DESCRIPTION: Executes pnpm commands to install all necessary project dependencies and then builds the application. These steps are prerequisites for running the Fastify server.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/fastify/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
```

----------------------------------------

TITLE: Environment Variables Setup
DESCRIPTION: Copies the example environment variables file and instructs to add necessary API keys and database URLs. This is crucial for the application's functionality, especially for AI and database connections.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/04-natural-language-postgres.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.example .env
```

LANGUAGE: bash
CODE:
```
OPENAI_API_KEY="your_api_key_here"
POSTGRES_URL="..."
POSTGRES_PRISMA_URL="..."
POSTGRES_URL_NO_SSL="..."
POSTGRES_URL_NON_POOLING="..."
POSTGRES_USER="..."
POSTGRES_HOST="..."
POSTGRES_PASSWORD="..."
POSTGRES_DATABASE="..."
```

----------------------------------------

TITLE: Build and Install Dependencies
DESCRIPTION: Installs project dependencies and builds the AI SDK. Requires a .env file with API keys.

SOURCE: https://github.com/vercel/ai/blob/main/examples/mcp/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
```

----------------------------------------

TITLE: Environment Setup and Dependencies
DESCRIPTION: Instructions for setting up the development environment, including Node.js and PNPM installation, and installing project dependencies.

SOURCE: https://github.com/vercel/ai/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install -g pnpm@10
brew install pnpm
pnpm install
pnpm build
```

----------------------------------------

TITLE: Local Development Steps
DESCRIPTION: Steps to set up and run the Nuxt OpenAI example locally, including obtaining an OpenAI API key and installing dependencies.

SOURCE: https://github.com/vercel/ai/blob/main/examples/nuxt-openai/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Install and Build Project Dependencies
DESCRIPTION: Executes commands to install all necessary project dependencies and then builds the application. This prepares the project for execution by resolving packages and compiling source code.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/hono/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
```

----------------------------------------

TITLE: Install AI SDK and OpenAI Provider
DESCRIPTION: Installs the necessary AI SDK packages and the OpenAI provider for a Next.js application using pnpm.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/22-gpt-4-5.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm install ai @ai-sdk/openai @ai-sdk/react
```

----------------------------------------

TITLE: Start SvelteKit OpenAI Development Server
DESCRIPTION: Starts the development server for the `sveltekit-openai` project. The `-F` flag ensures that pnpm focuses on the specified workspace, allowing you to run the example application locally.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/sveltekit-openai/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm -F sveltekit-openai dev
```

----------------------------------------

TITLE: Project Setup and Execution
DESCRIPTION: Instructions for setting up the Angular AI Chat project, including installing dependencies, configuring the environment with an OpenAI API key, and starting the application. This process launches both the Angular frontend and the Express backend.

SOURCE: https://github.com/vercel/ai/blob/main/examples/angular/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install dependencies
pnpm install

# Create .env file with your OpenAI API key
echo "OPENAI_API_KEY=your_key_here" > .env

# Start the app
pnpm start
```

----------------------------------------

TITLE: Install AI SDK and Anthropic Provider
DESCRIPTION: Installs the necessary AI SDK packages and the Anthropic provider using pnpm.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/18-claude-4.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm install ai @ai-sdk/anthropic
```

----------------------------------------

TITLE: Install AI SDK Dependencies
DESCRIPTION: Installs the necessary AI SDK packages and the OpenAI provider for SvelteKit applications using pnpm, npm, or yarn.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/04-svelte.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm add -D ai @ai-sdk/openai @ai-sdk/svelte zod
```

LANGUAGE: bash
CODE:
```
npm install -D ai @ai-sdk/openai @ai-sdk/svelte zod
```

LANGUAGE: bash
CODE:
```
yarn add -D ai @ai-sdk/openai @ai-sdk/svelte zod
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Starts the development server for the application. Once running, the application will be accessible at http://localhost:3000.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/04-natural-language-postgres.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Install Dependencies and Build Project
DESCRIPTION: Executes commands to install necessary project dependencies using pnpm and then builds the AI SDK repository, preparing it for execution.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/express/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
pnpm build
```

----------------------------------------

TITLE: Run Development Server
DESCRIPTION: Starts the Svelte development server for the AI chatbot application.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/04-svelte.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Run AI Chatbot Application
DESCRIPTION: Command to start the AI chatbot application using pnpm. This is the primary command to get the application running locally.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/07-expo.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm expo
```

----------------------------------------

TITLE: Streamable HTTP Transport Example
DESCRIPTION: Starts the HTTP server for stateful communication and runs the client example to demonstrate the transport.

SOURCE: https://github.com/vercel/ai/blob/main/examples/mcp/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm http:server
pnpm http:client
```

----------------------------------------

TITLE: Install Dependencies and Configure Environment
DESCRIPTION: Commands to install project dependencies using pnpm and copy the example environment file to `.env.local` for configuration.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-openai-kasada-bot-protection/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
pnpm i
cp .env.local.example .env.local # and fill in the required values
```

----------------------------------------

TITLE: Install AI SDK Core Package
DESCRIPTION: This command installs the main AI SDK package, which provides core functionalities for interacting with AI models. It is the foundational step required before installing specific model providers.

SOURCE: https://github.com/vercel/ai/blob/v5/packages/ai/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install ai
```

----------------------------------------

TITLE: Environment Variable Setup
DESCRIPTION: Sets up the necessary environment variable for API key authentication, specifically for OpenAI.

SOURCE: https://github.com/vercel/ai/blob/main/examples/hono/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
OPENAI_API_KEY="YOUR_OPENAI_API_KEY"
```

----------------------------------------

TITLE: Typical OpenTelemetry (OTEL) Setup for AI SDK Observability
DESCRIPTION: This example outlines a more complex OpenTelemetry (OTEL) setup for observability, contrasting it with Helicone's proxy approach. It involves installing multiple packages, configuring an exporter, setting up an SDK with instrumentations and resources, starting the SDK, enabling telemetry on requests, and finally shutting down the SDK to flush traces.

SOURCE: https://github.com/vercel/ai/blob/v5/content/providers/05-observability/helicone.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
// Install multiple packages
// @vercel/otel, @opentelemetry/sdk-node, @opentelemetry/auto-instrumentations-node, etc.

// Create exporter
const exporter = new OtherProviderExporter({ 
  projectApiKey: process.env.API_KEY 
});

// Setup SDK
const sdk = new NodeSDK({
  traceExporter: exporter,
  instrumentations: [getNodeAutoInstrumentations()],
  resource: new Resource({...}),
});

// Start SDK
sdk.start();

// Enable telemetry on each request
const response = await generateText({
  model: openai("gpt-4o-mini"),
  prompt: "Hello world",
  experimental_telemetry: { isEnabled: true }
});

// Shutdown SDK to flush traces
await sdk.shutdown();
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Initiates the development server for the Express.js application, making the AI SDK example accessible locally.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/express/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: SSE Transport Example (Legacy)
DESCRIPTION: Starts the SSE server and runs the client example for legacy Server-Sent Events communication.

SOURCE: https://github.com/vercel/ai/blob/main/examples/mcp/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
pnpm sse:server
pnpm sse:client
```

----------------------------------------

TITLE: Install Project Dependencies
DESCRIPTION: Installs the project's dependencies using pnpm. Ensure you have pnpm installed globally before running this command.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/01-rag-chatbot.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Running the Application
DESCRIPTION: This command starts the development server for the Next.js application, allowing you to view and interact with the chatbot locally.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/02-nextjs-app-router.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Launches the Fastify development server. Once running, the application will be accessible locally, typically on port 8080, ready to handle requests.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/fastify/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Install AI SDK and Anthropic Provider
DESCRIPTION: Installs the necessary AI SDK packages and the Anthropic provider using pnpm.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/20-sonnet-3-7.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm install ai @ai-sdk/anthropic
```

----------------------------------------

TITLE: Install Project Dependencies with pnpm
DESCRIPTION: Installs all required project dependencies using pnpm. This command should be run from the root directory of the AI SDK repository to ensure all necessary packages are available.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/node-http-server/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Development Server Start Command
DESCRIPTION: Command to start the Next.js development server.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/01-rag-chatbot.mdx#_snippet_14

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Initiates the Hono server in development mode. This command makes the application accessible locally, typically for testing and development purposes.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/hono/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Install Project Dependencies with pnpm
DESCRIPTION: This command installs all required project dependencies using `pnpm`, ensuring that the application has all necessary packages to run correctly.

SOURCE: https://github.com/vercel/ai/blob/v5/examples/nest/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Running Examples
DESCRIPTION: Commands to run examples for the AI SDK Core and other framework examples.

SOURCE: https://github.com/vercel/ai/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd examples/ai-core
pnpm tsx src/stream-text/openai.ts
pnpm dev
```

----------------------------------------

TITLE: Tool Calling with AI SDK
DESCRIPTION: Illustrates how to use tool calling with the AI SDK to enable models to interact with external systems. This example uses a `getWeather` tool to fetch simulated weather data.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/24-o3.mdx#_snippet_3

LANGUAGE: ts
CODE:
```
import { generateText, tool } from 'ai';
import { openai } from '@ai-sdk/openai';
import { z } from 'zod';

const { text } = await generateText({
  model: openai('o3-mini'),
  prompt: 'What is the weather like today in San Francisco?',
  tools: {
    getWeather: tool({
      description: 'Get the weather in a location',
      inputSchema: z.object({
        location: z.string().describe('The location to get the weather for'),
      }),
      execute: async ({ location }) => ({
        location,
        temperature: 72 + Math.floor(Math.random() * 21) - 10,
      }),
    }),
  },
});

```

----------------------------------------

TITLE: Install Project Dependencies
DESCRIPTION: Installs the necessary project dependencies using pnpm. This command should be run after cloning the repository.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/03-slackbot.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Computer Tool Setup with Anthropic
DESCRIPTION: Sets up a computer tool using the Anthropic AI SDK provider. This tool defines display dimensions and an execute function to handle actions like screenshots or other computer interactions. It also includes a toModelOutput function to format results for the model.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/05-computer-use.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import {
  anthropic,
  type ToolOutput,
} from '@ai-sdk/anthropic';
import { getScreenshot, executeComputerAction } from '@/utils/computer-use';

const computerTool = anthropic.tools.computer_20250124({
  displayWidthPx: 1920,
  displayHeightPx: 1080,
  execute: async ({ action, coordinate, text }): Promise<ToolOutput | string> => {
    switch (action) {
      case 'screenshot': {
        return {
          type: 'image',
          data: getScreenshot(),
        };
      }
      default: {
        return executeComputerAction(action, coordinate, text);
      }
    }
  },
  toModelOutput(result) {
    return typeof result === 'string'
      ? [{ type: 'text', text: result }]
      : [{ type: 'image', data: result.data, mediaType: 'image/png' }];
  },
});
```

----------------------------------------

TITLE: Environment Variable Setup
DESCRIPTION: Sets up the necessary environment variable for API key authentication, specifically for OpenAI.

SOURCE: https://github.com/vercel/ai/blob/main/examples/express/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
OPENAI_API_KEY="YOUR_OPENAI_API_KEY"
```

----------------------------------------

TITLE: Install AI SDK Dependencies
DESCRIPTION: Installs the necessary AI SDK packages for Vue.js, including the core AI SDK, the OpenAI provider, the Vue integration, and Zod for validation.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/05-nuxt.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm add ai @ai-sdk/openai @ai-sdk/vue zod
```

LANGUAGE: bash
CODE:
```
npm install ai @ai-sdk/openai @ai-sdk/vue zod
```

LANGUAGE: bash
CODE:
```
yarn add ai @ai-sdk/openai @ai-sdk/vue zod
```

----------------------------------------

TITLE: Environment Variable Setup
DESCRIPTION: Configure your OpenAI API key in a .env file for authentication.

SOURCE: https://github.com/vercel/ai/blob/main/examples/node-http-server/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
OPENAI_API_KEY="YOUR_OPENAI_API_KEY"
```

----------------------------------------

TITLE: Basic RAG Example (Input/Output)
DESCRIPTION: Illustrates a basic RAG scenario where an LLM is prompted without and with relevant context. The first example shows the LLM's inability to answer a personal question, while the second demonstrates how providing context (user's favorite food) enables an accurate response.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/01-rag-chatbot.mdx#_snippet_0

LANGUAGE: txt
CODE:
```
**input**
What is my favorite food?

**generation**
I don't have access to personal information about individuals, including their
favorite foods.
```

LANGUAGE: txt
CODE:
```
**input**
Respond to the user's prompt using only the provided context.
user prompt: 'What is my favorite food?'
context: user loves chicken nuggets

**generation**
Your favorite food is chicken nuggets!
```

----------------------------------------

TITLE: Install Project Dependencies
DESCRIPTION: Installs the necessary project dependencies using the pnpm package manager. This command should be run after cloning the repository.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/04-natural-language-postgres.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Computer Use Tools Overview
DESCRIPTION: Overview of the three main tools available in the Computer Use API for interacting with computer interfaces.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/05-computer-use.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Computer Tool:
  Description: Enables basic computer control like mouse movement, clicking, and keyboard input.

Text Editor Tool:
  Description: Provides functionality for viewing and editing text files.

Bash Tool:
  Description: Allows execution of bash commands.
```

----------------------------------------

TITLE: Text Generation with OpenAI o1
DESCRIPTION: Shows how to use the `generateText` function with the OpenAI o1 model. This example highlights a specific version requirement or temperature setting for o1 models.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/23-o1.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { generateText } from 'ai';
import { openai } from '@ai-sdk/openai';

const { text } = await generateText({
  model: openai('o1'),
  prompt: 'Explain the concept of quantum entanglement.',
});
```

----------------------------------------

TITLE: Bootstrap Nuxt OpenAI Example
DESCRIPTION: Command to create a new Nuxt project using the AI SDK and OpenAI example from a GitHub repository.

SOURCE: https://github.com/vercel/ai/blob/main/examples/nuxt-openai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-nuxt -t github:vercel/ai/examples/nuxt-openai nuxt-openai
```

----------------------------------------

TITLE: Bootstrap Next.js App with AI SDK Example
DESCRIPTION: Instructions on how to bootstrap a new Next.js application using create-next-app with a specific example from the Vercel AI repository. This command clones the example and sets up the project structure.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-openai-telemetry/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai-telemetry next-openai-telemetry-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai-telemetry next-openai-telemetry-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai-telemetry next-openai-telemetry-app
```

----------------------------------------

TITLE: Install AI SDK 5 Beta
DESCRIPTION: Installs the AI SDK 5 Beta along with specific provider and framework packages using npm. Users should replace placeholders with their desired provider and framework.

SOURCE: https://github.com/vercel/ai/blob/v5/content/docs/01-announcing-ai-sdk-5-beta/index.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install ai@beta @ai-sdk/openai@beta @ai-sdk/react@beta
```

----------------------------------------

TITLE: Next.js Chatbot with AI SDK
DESCRIPTION: Provides a step-by-step guide to building a chatbot interface in a Next.js application using the AI SDK and AI SDK UI's `useChat` hook. It includes setting up the route handler and the client-side component.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/24-o3.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
pnpm install ai @ai-sdk/openai @ai-sdk/react
```

LANGUAGE: tsx
CODE:
```
import { openai } from '@ai-sdk/openai';
import { convertToModelMessages, streamText, UIMessage } from 'ai';

// Allow responses up to 5 minutes
export const maxDuration = 300;

export async function POST(req: Request) {
  const { messages }: { messages: UIMessage[] } = await req.json();

  const result = streamText({
    model: openai('o3-mini'),
    messages: convertToModelMessages(messages),
  });

  return result.toUIMessageStreamResponse();
}

```

LANGUAGE: tsx
CODE:
```
'use client';

import { useChat } from '@ai-sdk/react';

export default function Page() {
  const { messages, input, handleInputChange, handleSubmit, error } = useChat();

  return (
    <>
      {messages.map(message => (
        <div key={message.id}>
          {message.role === 'user' ? 'User: ' : 'AI: '}
          {message.content}
        </div>
      ))}
      <form onSubmit={handleSubmit}>
        <input name="prompt" value={input} onChange={handleInputChange} />
        <button type="submit">Submit</button>
      </form>
    </>
  );
}

```

----------------------------------------

TITLE: Install Google Vertex Provider
DESCRIPTION: Installs the Google Vertex provider package using npm. This is the initial setup step for using Google Vertex AI models with the AI SDK.

SOURCE: https://github.com/vercel/ai/blob/main/packages/google-vertex/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i @ai-sdk/google-vertex
```

----------------------------------------

TITLE: Streaming Text Generation with Computer Tool
DESCRIPTION: Shows how to integrate the computer tool with the `streamText` function for real-time responses. The example iterates over the text stream to process the AI's output, which may include actions triggered by the computer tool.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/05-computer-use.mdx#_snippet_5

LANGUAGE: typescript
CODE:
```
import {
  anthropic,
  streamText,
  type ToolOutput,
} from '@ai-sdk/anthropic';

// Assuming computerTool is defined as in the previous example

const result = streamText({
  model: anthropic('claude-sonnet-4-20250514'),
  prompt: 'Open the browser and navigate to vercel.com',
  tools: { computer: computerTool },
});

for await (const chunk of result.textStream) {
  console.log(chunk);
}
```

----------------------------------------

TITLE: Run Development Server
DESCRIPTION: Starts the development server for the AI chatbot application. This command is used to run the application locally for testing and development.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/05-nuxt.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Install AI SDK Dependencies
DESCRIPTION: Installs the necessary AI SDK packages for React, OpenAI integration, and Zod for validation.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/02-nextjs-app-router.mdx#_snippet_2

LANGUAGE: pnpm
CODE:
```
pnpm add ai @ai-sdk/react @ai-sdk/openai zod
```

LANGUAGE: npm
CODE:
```
npm install ai @ai-sdk/react @ai-sdk/openai zod
```

LANGUAGE: yarn
CODE:
```
yarn add ai @ai-sdk/react @ai-sdk/openai zod
```

----------------------------------------

TITLE: Running the Next.js Application
DESCRIPTION: Command to start the Next.js development server. This command is typically run in the project's root directory.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/03-nextjs-pages-router.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm run dev
```

----------------------------------------

TITLE: Quick Start with Letta Cloud
DESCRIPTION: Provides a basic example of using the `generateText` function with the Letta Cloud provider, specifying an agent ID and a prompt.

SOURCE: https://github.com/vercel/ai/blob/main/content/providers/03-community-providers/71-letta.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { lettaCloud } from '@letta-ai/vercel-ai-sdk-provider';
import { generateText } from 'ai';

const { text } = await generateText({
  model: lettaCloud('your_agent_id'),
  prompt: 'Write a vegetarian lasagna recipe for 4 people.',
});
```

----------------------------------------

TITLE: Create SvelteKit App
DESCRIPTION: Creates a new SvelteKit application using the 'sv create' command. This sets up the basic project structure.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/04-svelte.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx sv create my-ai-app
```

----------------------------------------

TITLE: Run AI SDK Core Example
DESCRIPTION: Navigate to the `examples/ai-core` directory and execute a specific AI SDK Core example using `tsx`.

SOURCE: https://github.com/vercel/ai/blob/v5/CONTRIBUTING.md#_snippet_4

LANGUAGE: Shell
CODE:
```
pnpm tsx src/stream-text/openai.ts
```

----------------------------------------

TITLE: Bootstrap Next.js App with AI SDK Example
DESCRIPTION: Command to create a new Next.js application pre-configured with the AI SDK example from a GitHub repository. This command uses npx, yarn, or pnpm to fetch and set up the project.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-openai-telemetry/app/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai next-openai-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai next-openai-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai next-openai-app
```

----------------------------------------

TITLE: Install Gladia Provider
DESCRIPTION: Installs the Gladia provider module for the AI SDK using npm.

SOURCE: https://github.com/vercel/ai/blob/main/packages/gladia/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i @ai-sdk/gladia
```

----------------------------------------

TITLE: Install AI SDK Dependencies
DESCRIPTION: Command to install the necessary AI SDK packages for embedding generation.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/01-rag-chatbot.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
pnpm add ai @ai-sdk/react @ai-sdk/openai
```

----------------------------------------

TITLE: Install AI SDK Dependencies
DESCRIPTION: Installs the necessary AI SDK packages for Expo, including the core AI package, the OpenAI provider, the React integration, and Zod for validation.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/07-expo.mdx#_snippet_2

LANGUAGE: pnpm
CODE:
```
pnpm add ai @ai-sdk/openai @ai-sdk/react zod
```

LANGUAGE: npm
CODE:
```
npm install ai @ai-sdk/openai @ai-sdk/react zod
```

LANGUAGE: yarn
CODE:
```
yarn add ai @ai-sdk/openai @ai-sdk/react zod
```

----------------------------------------

TITLE: Navigate to Project Directory
DESCRIPTION: Changes the current directory to the newly created SvelteKit application.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/04-svelte.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd my-ai-app
```

----------------------------------------

TITLE: Bootstrap Next.js App with FastAPI Example
DESCRIPTION: Command to bootstrap a new Next.js application using a specific example from the Vercel AI repository, which includes FastAPI integration. This command clones the example and sets up the project structure.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-fastapi/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example https://github.com/vercel/ai/tree/main/examples/next-fastapi next-fastapi-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example https://github.com/vercel/ai/tree/main/examples/next-fastapi next-fastapi-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example https://github.com/vercel/ai/tree/main/examples/next-fastapi next-fastapi-app
```

----------------------------------------

TITLE: Create Nuxt Application
DESCRIPTION: Creates a new Nuxt application directory named 'my-ai-app' and sets up a basic Nuxt project.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/05-nuxt.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm create nuxt my-ai-app
```

----------------------------------------

TITLE: Refine Reasoning Effort for o3-mini
DESCRIPTION: This code example shows how to control the reasoning effort of the o3-mini model using the `reasoningEffort` parameter within `providerOptions`. You can set it to 'low', 'medium', or 'high' to adjust the model's computation for responses. This example specifically sets it to 'low' for faster responses.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/24-o3.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { generateText } from 'ai';
import { openai } from '@ai-sdk/openai';

// Reduce reasoning effort for faster responses
const { text } = await generateText({
  model: openai('o3-mini'),
  prompt: 'Explain quantum entanglement briefly.',
  providerOptions: {
    openai: { reasoningEffort: 'low' },
  },
});
```

----------------------------------------

TITLE: Install AI SDK OpenAI Provider
DESCRIPTION: This command installs the OpenAI provider package for the AI SDK. This package enables the AI SDK to interact with OpenAI's models, such as GPT-4o, and requires the `OPENAI_API_KEY` environment variable to be set for authentication.

SOURCE: https://github.com/vercel/ai/blob/v5/packages/ai/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
npm install @ai-sdk/openai
```

----------------------------------------

TITLE: Call DeepSeek R1 with Groq and Reasoning Middleware
DESCRIPTION: Illustrates integrating DeepSeek R1 through the Groq provider using the AI SDK. It utilizes a middleware to extract reasoning tokens, similar to the Fireworks example, for structured output.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/25-r1.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import { groq } from '@ai-sdk/groq';
import {
  generateText,
  wrapLanguageModel,
  extractReasoningMiddleware,
} from 'ai';

// middleware to extract reasoning tokens
const enhancedModel = wrapLanguageModel({
  model: groq('deepseek-r1-distill-llama-70b'),
  middleware: extractReasoningMiddleware({ tagName: 'think' }),
});

const { reasoningText, text } = await generateText({
  model: enhancedModel,
  prompt: 'Explain quantum entanglement.',
});
```

----------------------------------------

TITLE: SQL Query Generation Prompt Example
DESCRIPTION: An example prompt designed to guide an AI model in generating SQL queries for a 'unicorns' table. It includes schema details, query constraints, data transformation rules, and output formatting guidelines for chart-friendly results.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/04-natural-language-postgres.mdx#_snippet_5

LANGUAGE: txt
CODE:
```
You are a SQL (postgres) and data visualization expert. Your job is to help the user write a SQL query to retrieve the data they need. The table schema is as follows:

unicorns (
  id SERIAL PRIMARY KEY,
  company VARCHAR(255) NOT NULL UNIQUE,
  valuation DECIMAL(10, 2) NOT NULL,
  date_joined DATE,
  country VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  industry VARCHAR(255) NOT NULL,
  select_investors TEXT NOT NULL
);

Only retrieval queries are allowed.

For things like industry, company names and other string fields, use the ILIKE operator and convert both the search term and the field to lowercase using LOWER() function. For example: LOWER(industry) ILIKE LOWER('%search_term%').

Note: select_investors is a comma-separated list of investors. Trim whitespace to ensure you're grouping properly. Note, some fields may be null or have only one value.
When answering questions about a specific field, ensure you are selecting the identifying column (ie. what is Vercel's valuation would select company and valuation').

The industries available are:
- healthcare & life sciences
- consumer & retail
- financial services
- enterprise tech
- insurance
- media & entertainment
- industrials
- health

If the user asks for a category that is not in the list, infer based on the list above.

Note: valuation is in billions of dollars so 10b would be 10.0.
Note: if the user asks for a rate, return it as a decimal. For example, 0.1 would be 10%.

If the user asks for 'over time' data, return by year.

When searching for UK or USA, write out United Kingdom or United States respectively.

EVERY QUERY SHOULD RETURN QUANTITATIVE DATA THAT CAN BE PLOTTED ON A CHART! There should always be at least two columns. If the user asks for a single column, return the column and the count of the column. If the user asks for a rate, return the rate as a decimal. For example, 0.1 would be 10%.
```

----------------------------------------

TITLE: Install Groq Provider
DESCRIPTION: Installs the Groq provider module for the AI SDK using npm.

SOURCE: https://github.com/vercel/ai/blob/main/packages/groq/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i @ai-sdk/groq
```

----------------------------------------

TITLE: Install AI SDK Dependencies
DESCRIPTION: Installs the necessary AI SDK packages for React and the OpenAI provider. Supports pnpm, npm, and yarn.

SOURCE: https://github.com/vercel/ai/blob/main/content/cookbook/00-guides/02-multi-modal-chatbot.mdx#_snippet_2

LANGUAGE: pnpm
CODE:
```
pnpm add ai @ai-sdk/react @ai-sdk/openai
```

LANGUAGE: npm
CODE:
```
npm install ai @ai-sdk/react @ai-sdk/openai
```

LANGUAGE: yarn
CODE:
```
yarn add ai @ai-sdk/react @ai-sdk/openai
```

----------------------------------------

TITLE: Install Replicate Provider
DESCRIPTION: Installs the Replicate provider module for the AI SDK using npm.

SOURCE: https://github.com/vercel/ai/blob/main/packages/replicate/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i @ai-sdk/replicate
```

----------------------------------------

TITLE: Install Gateway Provider
DESCRIPTION: Installs the Gateway provider module for the AI SDK using npm.

SOURCE: https://github.com/vercel/ai/blob/main/packages/gateway/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i @ai-sdk/gateway
```

----------------------------------------

TITLE: Install AI SDK Polyfills
DESCRIPTION: Installs the required packages for AI SDK polyfills using different package managers (pnpm, npm, yarn). These packages provide essential functionalities like structured cloning and text encoding streams.

SOURCE: https://github.com/vercel/ai/blob/main/content/docs/02-getting-started/07-expo.mdx#_snippet_14

LANGUAGE: bash
CODE:
```
pnpm add @ungap/structured-clone @stardazed/streams-text-encoding
```

LANGUAGE: bash
CODE:
```
npm install @ungap/structured-clone @stardazed/streams-text-encoding
```

LANGUAGE: bash
CODE:
```
yarn add @ungap/structured-clone @stardazed/streams-text-encoding
```

----------------------------------------

TITLE: Bootstrap Next.js App with AI SDK Example
DESCRIPTION: Command to create a new Next.js application pre-configured with the AI SDK and OpenAI example. This command uses `create-next-app` with a specific GitHub repository URL.

SOURCE: https://github.com/vercel/ai/blob/main/examples/next-openai-pages/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai-pages next-openai-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai-pages next-openai-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example https://github.com/vercel/ai/tree/main/examples/next-openai-pages next-openai-app
```