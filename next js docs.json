"revalidatePath(path: string, type?: 'page' | 'layout'): void; Invalidates cached data for a specific path. path: string, route path. type: 'page' or 'layout'. No return value. Limits: path < 1024 chars. fetch(url, options): Extended Web fetch() API. Allows setting caching semantics. options.cache: 'force-cache' (default, similar to getStaticProps) or 'no-store' (similar to getServerSideProps). options.next.revalidate: Cache lifetime (seconds). false (indefinite), 0 (no cache), number (cache lifetime). options.next.tags: Cache tags for on-demand revalidation. Max length 256 chars, max 64 items. Conflicting options cause error. Image Optimization: Next.js Image component extends HTML <img> for optimization. Size Optimization, Visual Stability, Faster Page Loads, Asset Flexibility. import Image from 'next/image' Local Images: import image files. Next.js determines width/height. Remote Images: Specify width, height, blurDataURL. Configure allowed URL patterns in next.config.js. Loaders: Function to generate image URLs. Priority: Add priority prop to LCP image. Sizing: Size images to prevent layout shift: static import, width/height, or fill. Styling: Use className or style. Parent of fill images requires position: relative and display: block. Configuration: Configure in next.config.js. Enable remote images, define breakpoints, change caching. images: { remotePatterns: [{ protocol: 'https', hostname: 's3.amazonaws.com', port: '', pathname: '/my-bucket/**', }, ], }, useParams: Client Component hook, reads dynamic params from the current URL. Returns an object with dynamic parameters. Returns empty object if no params. useSelectedLayoutSegments(parallelRoutesKey?: string) Client Component hook. Returns array of active route segments below layout, or empty array if none exist. Includes Route Groups. Middleware: Runs code before request completion. Can rewrite, redirect, modify headers, or respond directly. Runs before cached content/routes. middleware.ts (or .js) in root defines Middleware. config.matcher: Defines paths Middleware runs on. Supports regex. Example: matcher: ['/about/:path*', '/dashboard/:path*'] NextResponse: API for redirecting, rewriting, setting headers/cookies. request.cookies: API to get, set, delete cookies. response.headers: Set request and response headers. CORS: Set CORS headers using NextResponse. isAuthenticated(request): Checks authentication. Returns Response.json({ success: false, message: 'authentication failed' }, { status: 401 }) on failure. event.waitUntil(promise): Extends Middleware lifetime until promise settles. skipTrailingSlashRedirect: Disables Next.js trailing slash redirects. skipMiddlewareUrlNormalize: Disables URL normalization. cookies(): Reads/writes HTTP request cookies (Server Component/Action/Route Handler). cookies().get(name): Returns cookie object or undefined. cookies().getAll(): Returns all cookies. cookies().has(name): Returns boolean. cookies().set(name, value, options): Sets cookie (Server Action/Route Handler only). cookies().delete(name): Deletes cookie (Server Action/Route Handler). Deletion methods: cookies().delete(name), cookies().set(name, ''), cookies().set(name, value, { maxAge: 0 }), cookies().set(name, value, { expires: timestamp }). Font Module. API Reference for next/font/google and next/font/local. Font Function Arguments: src: String|Array, font file path. weight: String|Array, font weight. style: String|Array. subsets: Array[String]. axes: Array[String]. display: String, auto|block|swap|fallback|optional. preload: Boolean. fallback: Array[String], fallback fonts. adjustFontFallback: Boolean|String. variable: String, CSS variable name. declarations: Array[Object]. className: returns CSS class name. style: returns CSS style object. Usage: apply styles with className, style, CSS variables. Font definition files for reuse. Version: v13.2.0 renamed to next/font, v13.0.0 added @next/font. redirect(path, type): Redirects user to another URL. path: URL (string). type: 'replace'|'push'. Throws NEXT_REDIRECT error. Example: redirect('/login'). In Server Actions: call after try/catch. Uses 307 (temporary) or 308 (permanent). Not return any value. Authentication Next.js concepts Authentication Session Management Authorization. Authentication verifies user identity. Session Management tracks user state logged in across requests. Authorization allows access application parts. Authentication Strategies OAuth/OIDC Credentials-based Email Password Passwordless Token-based Passkeys/WebAuthn. Implementing Authentication login form API route /api/auth/login signIn. Example LoginPage handleSubmit event FormEvent HTMLFormElement event.preventDefault formData FormData event.currentTarget email formData.get email password formData.get password response fetch /api/auth/login method POST headers Content-Type application/json body JSON.stringify email password if response.ok router.push /profile. API route handler req NextApiRequest res NextApiResponse import signIn '@/auth' handler req res try email password req.body await signIn credentials email password res.status 200. catch error if error.type CredentialsSignin res.status 401. Authorization Middleware protect routes API Routes. Middleware middleware.ts matcher exclude public routes. Middleware logic check authentication tokens user roles permissions. Unauthorized redirect login error page. Example middleware.ts import NextRequest next/server export function middleware request NextRequest currentUser request.cookies.get currentUser?.value if currentUser !request.nextUrl.pathname.startsWith /dashboard return Response.redirect new URL /dashboard request.url if !currentUser !request.nextUrl.pathname.startsWith /login return Response.redirect new URL /login request.url export const config matcher '/((?!api|_next/static|_next/image|.*\\\\\\\\.png$).*)'. API Route protection getSession check session user role. Example API route handler req NextApiRequest res NextApiResponse import getSession handler req res const session await getSession req if !session res.status 401 error User not authenticated return if session.user.role !== admin res.status 401 error Unauthorized access admin privileges return. Session Management Cookie-Based Sessions Database Sessions. Cookie-based encrypted session data in cookies. Database Sessions session ID server-side session data. NextAuth.js simplifies session management. Examples Auth0 Clerk Kinde Lucia NextAuth.js Supabase Stytch Iron Session. usePathname: Client Component hook to read the current URL's pathname. Returns a string. Example: 'use client'; import { usePathname } from 'next/navigation'; const pathname = usePathname();. Returns null in compatibility mode. useRouter: Hook to access the router object in function components. Returns: {pathname: string, query: object, asPath: string, isFallback: boolean, basePath: string, locale: string, locales: string[], defaultLocale: string, domainLocales: array, isReady: boolean, isPreview: boolean}. Methods: router.push(url, as, options), router.replace(url, as, options), router.prefetch(url, as, options), router.beforePopState(cb), router.back(), router.reload(), router.events. on/off(event, callback). withRouter HOC also available for class components. next/font automatic font optimization self-hosting Google Fonts support import fonts from next/font/google or next/font/local Google Fonts import { Inter } from 'next/font/google' const inter = Inter({ subsets: ['latin'] display: 'swap' }) use inter.className Local Fonts import localFont from 'next/font/local' const myFont = localFont({ src: './my-font.woff2' display: 'swap' }) use myFont.className multiple weights/styles Roboto({ weight: ['400' '700'] style: ['normal' 'italic'] subsets: ['latin'] display: 'swap' }) subsets specify subsets for Google Fonts multiple fonts import and use or CSS variables Tailwind CSS CSS variables with variable option and Tailwind config preloading fonts preloaded on routes used reusing fonts import loader function as constant error.js: Defines an error UI boundary. Props: error, reset. error: Error object, has digest. reset: Function to retry render. global-error.js: Handles errors in root layout. not-found.js: Renders UI when notFound() is thrown. headers: async function to set custom HTTP headers based on request path. Returns array of {source: path_pattern, headers: [{key, value}]}. Path matching: params /blog/:slug, wildcard /blog/:slug*, regex /blog/:slug(\\\\\\\\d{1,}). Matching conditions: has, missing arrays for header, cookie, host, query with type, key, value. basePath: false, locale: false in header config disables prefixing. Last header overrides. CORS example. X-DNS-Prefetch-Control, Strict-Transport-Security, X-Frame-Options, Permissions-Policy, X-Content-Type-Options, Referrer-Policy headers described. next/font/google, next/font/local: Font optimization API. Arguments: src (string|array), weight (string|array), style (string|array), subsets (array), axes (array), display (string), preload (bool), fallback (array), adjustFontFallback (bool|string), variable (string), declarations (array). Applying Styles: className, style, CSS Variables. CSS Variables example: const inter = Inter({ variable: '--font-inter' }). <main className={inter.variable}>. Use a font definitions file for using fonts in multiple places. Next.js app icons favicon icon apple-icon can be set using image files .ico .jpg .png or code .js .ts .tsx in the app directory. Image files can be favicon.ico in app/ icon.* apple-icon.* in app/**/*. Code generation uses icon.js apple-icon.js exporting a function using ImageResponse from next/og. Configurable size and contentType exports. Route params available in code generation. generateImageMetadata: Generates image metadata for route segments. Parameters: params (optional): route parameters. Returns: Array of image metadata objects: id (string, required), alt (string), size { width: number; height: number }, contentType (string). Example: export function generateImageMetadata() { return [ { contentType: 'image/png', size: { width: 48, height: 48 }, id: 'small', }, ] } Link component for client-side navigation. Props: href (string or object, required), replace (boolean), scroll (boolean), prefetch (boolean|null). If child wraps an a tag: passHref, legacyBehavior. With URL object: href={{pathname, query}}. Middleware: use as and href. create-next-app: CLI tool to create Next.js apps. Usage: `npx create-next-app@latest [options]`. Options: `--ts`, `--js`, `--tailwind`, `--eslint`, `--app`, `--src-dir`, `--import-alias`, `--use-npm`, `--use-pnpm`, `--use-yarn`, `--use-bun`, `--example`, `--example-path`. Interactive/non-interactive modes. Zero dependencies. Offline/examples support. CSS Modules: Locally scoped CSS using .module.css extension. import styles from './Button.module.css' <button className={styles.error}> Global Styles: Import CSS file in pages/_app.js. Applies to all pages. import '../styles.css' External Stylesheets: Import CSS files from node_modules or other sources. Fast Refresh: Local stylesheets support Fast Refresh in development. Production: CSS bundled into minified .css files. JavaScript: Required for Fast Refresh in dev. getStaticProps() pre-renders page at build time. export const getStaticProps = async (context: GetStaticPropsContext): Promise<{ props?: object, redirect?: Redirect, notFound?: boolean, revalidate?: number }>. context: { params, preview, previewData, draftMode, locale, locales, defaultLocale, revalidateReason }. Returns: { props, redirect, notFound, revalidate }. revalidate: seconds for page re-generation. notFound: returns 404 page. redirect: { destination: string, permanent: boolean }. process.cwd() for file system access. Dynamic Routes: [folderName]. params prop for layout, page, route, generateMetadata. Example: app/blog/[slug]/page.js, params: { slug: string }. generateStaticParams() for static generation. Catch-all: [...folderName], params: { slug: string[] }. Optional catch-all: [[...folderName]], params: { slug?: string[] }. TypeScript types for params based on route segment. Server Actions: Asynchronous functions executed on the server for form submissions and data mutations. Defined with \"use server\" directive (function-level or module-level). Invoked using the action attribute in a <form> element. Arguments and return values must be serializable by React. Integration with Next.js caching and revalidation. Can be used with event handlers, useEffect, and other form elements. Server-side validation can be done using a library like zod. revalidatePath, revalidateTag for cache invalidation. redirect API for redirection. cookies API for cookie management. Security: Treat actions like API endpoints. Use auth to authorize user. Closures and encryption: Captures a snapshot of data for later use. Use the React taint APIs to proactively prevent specific data from being sent to the client. Allowed origins: use the configuration option serverActions.allowedOrigins to specify a list of safe origins. Font Optimization: next/font optimizes fonts, removes external requests. Google Fonts: Automatically self-hosted, no browser requests to Google. Import from next/font/google. Example: import { Inter } from 'next/font/google'; const inter = Inter({ subsets: ['latin'] }); <main className={inter.className}>. Local Fonts: import localFont from 'next/font/local'; const myFont = localFont({ src: './my-font.woff2' }). With Tailwind CSS: Use CSS variables. Recommendation: Reuse font instances. getServerSideProps:function Fetches data and renders page on server at request time. Export from Page Component. Returns JSON props. Runs on server-side only. Use for personalized user data or request-time information. Consider getStaticProps with ISR for caching. Error handling: pages/500.js. Edge Runtime: no response object access in Edge Runtime. Caching: Use Cache-Control headers in response. useSearchParams(): Client Hook, reads URL query string. Returns read-only URLSearchParams. Methods: `get()`, `has()`, `getAll()`, `keys()`, etc. Server Components: not supported. Static Rendering: client-render to Suspense. Dynamic: server available. Pages: `searchParams` prop. Layouts: use hook or Page prop. Example: update params with `useRouter`/`Link`. (Legacy) src: image path/URL (required). width, height (required, except layout=fill). layout: intrinsic, fixed, responsive, fill. loader: Custom URL resolver. sizes: Breakpoint info for responsive images. quality: 1-100 (default 75). priority: Preload image. placeholder: blur | empty. remotePatterns: Configure external image sources. images config in next.config.js. loader: 'custom', loaderFile: './my/image/loader.js'. loaderFile: path to file with default function(src: string, width: number, quality?: number) => string. Alternative: loader prop in next/image. Example loaders: akamaiLoader, cloudfrontLoader, cloudinaryLoader, cloudflareLoader, contentfulLoader, fastlyLoader, gumletLoader, imageengineLoader, imgixLoader, thumborLoader, sanityLoader, sirvLoader, supabaseLoader. Each loader is a function taking src, width, and quality and returning an image URL string. rewrites: Map incoming request path to a different destination path. module.exports = { async rewrites() { return [{ source: string, destination: string, basePath?: boolean, locale?: boolean, has?: [], missing?: [] }] } }. Returns array or object of arrays with source and destination. Parameters passed in query unless used in destination. Path Matching: Wildcard *, Regex (\\\\d{1,}). Header/Cookie/Query Matching: has, missing. Rewriting to external URL supported. basePath and i18n support. Draft Mode: Enables dynamic rendering for draft content. Step 1: Create Route Handler, enable draftMode(). // route handler enabling draft mode import { draftMode } from 'next/headers'; export async function GET(request: Request) { draftMode().enable(); return new Response('Draft mode is enabled'); } Call from CMS with secret token and slug parameter. Redirect to slug. Step 2: Update page to check draftMode().isEnabled. Disable: draftMode().disable(). Unique cookie per build. Example: import { draftMode } from 'next/headers'; async function getData() { const { isEnabled } = draftMode(); const url = isEnabled ? 'https://draft.example.com' : 'https://production.example.com'; redirects: array. URL redirects. source: path pattern. destination: string. permanent: boolean (308) / false (307). Path matching, wildcard, regex. has, missing for header/cookie/query match. basePath: false, locale: false for prefix disable. Lazy loading: next/dynamic (React.lazy + Suspense). dynamic(() => import('component')) for dynamic import. loading: () => Loading... for fallback. ssr: false to disable server-side rendering. Use for Client Components, external libraries. 'next/web-vitals' useReportWebVitals((metric) => void): Reports web vitals metrics. metric: {id: string, name: string, value: number, label: string}. Example: useReportWebVitals((metric) => console.log(metric)). Can send results to external systems using navigator.sendBeacon() or fetch(). Use metric.id for Google Analytics distributions. NextResponse extends Web Response API. Methods: cookies: {set(name, value), get(name), getAll(name?), delete(name)} manipulates Set-Cookie header. json(body, init?): JSON response. redirect(url, init?): Redirect response. rewrite(url, init?): Rewrite response. next(init?): Continue middleware routing. Example set cookie: response.cookies.set('show-banner', 'false') Static Site Generation (SSG) generates HTML at build time, reused per request, cached by CDN. SSG without data: default, generates HTML per page at build time. SSG with data: use getStaticProps for page content data, getStaticPaths for page path data. getStaticProps: async function, fetches data at build, passed as props. getStaticPaths: async function, specifies paths to pre-render for dynamic pages, fallback option. Use SSG when page can be pre-rendered before request. Alternatives: Static Generation with Client-side data fetching, Server-Side Rendering. opengraph-image, twitter-image file conventions set social media images. Methods: image files (.jpg, .png, .gif) or code (.js, .ts, .tsx). File types: opengraph-image, twitter-image, .alt.txt for alt text. Code generation: default export function, ImageResponse API from next/og. Config exports: alt string, size {width, height}, contentType string. Route segment config: dynamic, revalidate, runtime, preferredRegion. Example: import { ImageResponse } from 'next/og'; export const runtime = 'edge'; export default async function Image() { return new ImageResponse( (), { ...size } ) } next/image: Image component for optimization. Features: size, stability, lazy load, resize. Usage: import Image from 'next/image'; <Image src=\"...\" alt=\"...\" width={} height={} />. Props: src, alt, width, height, priority, fill, sizes, loader, placeholder, blurDataURL, remotePatterns (config). Sizing: auto-import, explicit width/height, implicit fill. Styling: className, style. fill needs parent position:relative, display:block. Remote images require domain config in next.config.js remotePatterns. Route Handlers: `route.js` for custom request handlers in `app`. Methods: GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS. Export `async function METHOD(request: Request, context?: { params: Params })`. `request`: NextRequest. `context.params`: dynamic route params. `NextResponse`: cookies, headers, redirect, rewrite. @next/third-parties: Library for optimizing third-party libraries. Google Tag Manager: <GoogleTagManager gtmId=\"GTM-XYZ\" />. gtmId (required), dataLayer (optional), dataLayerName (optional), auth (optional), preview (optional). sendGTMEvent(event: string, data: object). Google Analytics: <GoogleAnalytics gaId=\"G-XYZ\" />. gaId (required), dataLayerName (optional). sendGAEvent(event: string, data: object). Google Maps Embed: <GoogleMapsEmbed apiKey=\"XYZ\" height={200} width=\"100%\" mode=\"place\" q=\"Brooklyn+Bridge,New+York,NY\" />. apiKey (required), mode (required), height (optional), width (optional), style (optional), allowfullscreen (optional), loading (optional), q (optional), center (optional), zoom (optional), maptype (optional), language (optional), region (optional). YouTube Embed: <YouTubeEmbed videoid=\"ogfYd705cRs\" height={400} params=\"controls=0\" />. videoid (required), width (optional), height (optional), playlabel (optional), params (optional), style (optional). generateMetadata function({params, searchParams}, parent:ResolvingMetadata):Metadata for dynamic metadata. metadata object:Metadata for static metadata. Metadata fields: title:string|{template, default, absolute}, description:string, generator:string, applicationName:string, referrer:string, keywords:string[], authors:Array<{name:string, url:string}>, creator:string, publisher:string, formatDetection:{email:boolean, address:boolean, telephone:boolean}, metadataBase:URL, openGraph:object, robots:object, icons:object, manifest:string, twitter:object, verification:object, appleWebApp:object, alternates:object, appLinks:object, archives:string[], assets:string[], bookmarks:string[], category:string, other:object. title.template applies to child segments. metadataBase: URL prefix for relative URLs. Image Component: <Image src=\"\" width={} height={} alt=\"\" />. Required Props: src, width, height, alt. src: Static import, path string, or external URL (add to remotePatterns). width: Rendered width (px). height: Rendered height (px). alt: Description for screen readers. Optional Props: loader: Custom URL resolver function ({src, width, quality} => url). fill: Fills parent element (parent must have position relative/absolute/fixed). sizes: Media query string for image width at breakpoints. quality: Image quality (1-100, default 75). priority: Preload image, disable lazy loading. placeholder: \"blur\", \"empty\", or \"data:image/...\" blurDataURL required for dynamic images. style: CSS styles for the image element. onLoadingComplete(img), onLoad(event), onError(event): Callbacks. loading: \"lazy\" (default) or \"eager\". overrideSrc: Override the src attribute. Configuration (next.config.js): remotePatterns: Allowed external image patterns (protocol, hostname, port, pathname). domains: (Deprecated) Allowed hostnames. loaderFile: Custom loader file path. deviceSizes, imageSizes, formats, minimumCacheTTL, disableStaticImages, dangerouslyAllowSVG, contentDispositionType, contentSecurityPolicy. Responsive Images: Use sizes and style or fill. Theme Detection: Use CSS media queries or <picture> element. getImageProps(): Get props for underlying <img> element. Lazy loading improves initial load by deferring Client Components and libraries. Implement using next/dynamic or React.lazy() with Suspense. Server Components are automatically code-split. next/dynamic composite of React.lazy() and Suspense, works in app and pages. Example: `dynamic(() => import('../components/A'))`. SSR can be disabled: `ssr: false`. Server Components children can be lazy loaded, not the Server Component itself. External libraries: `import('fuse.js')`. Custom loading: `loading: () => Loading...`. Named exports: `.then((mod) => mod.Hello)`. Draft Mode: Render pages at request time instead of build time. Step 1: Create API route (e.g., pages/api/draft.ts). Call res.setDraftMode({ enable: true }). Sets __prerender_bypass cookie. Securely access from CMS with secret token. Draft URL: https://<your-site>/api/draft?secret=<token>&slug=<path>. Check secret, call res.setDraftMode, redirect to slug (307). Step 2: Update getStaticProps. Called at request time with context.draftMode = true. Fetch draft data based on context.draftMode. Clear cookie: res.setDraftMode({ enable: false }). Works with getServerSideProps (context.draftMode). Works with API Routes (req.draftMode). Unique bypass cookie per next build. NextRequest: Extends Web Request API. cookies: Read/mutate Set-Cookie header. set(name, value): Set cookie. get(name): Get cookie value (first if multiple). getAll(name?): Get all cookies (or all with name). delete(name): Delete cookie. has(name): Check if cookie exists. clear(): Remove Set-Cookie header. nextUrl: Extends URL API. basePath: URL base path. buildId: Next.js build ID. pathname: URL pathname. searchParams: URL search parameters. ip: Request IP address (platform-provided or X-Forwarded-For). geo: Request geographic info (platform-provided). request.geo.city, request.geo.country, etc. redirect: (url: string) => void; Server Components, Route Handlers, Server Actions; 307 (Temporary), 303 (Server Action). After mutation, event. Throws error. Example: redirect('/new-page'). permanentRedirect: (url: string) => void; Server Components, Route Handlers, Server Actions; 308 (Permanent). After mutation, event. useRouter: {push: (url: string) => void}; Client Components. Client-side navigation. next.config.js redirects: Redirect incoming requests; 307, 308. Middleware: NextResponse.redirect(url); Conditional redirects. Large scale redirects, use Middleware with DB lookup and Bloom filter for perf. Store redirects in DB, use Bloom filter to check existence before lookup. Image component: Optimizes images. Props: src (string, required), width (number, required), height (number, required), alt (string, required), loader (function), fill (boolean), sizes (string), quality (number), priority (boolean), placeholder (string), style (object), onLoadingComplete (function), onLoad (function), onError (function), loading (string), blurDataURL (string), overrideSrc(string), unoptimized(boolean). Example: <Image src=\"/profile.png\" width={500} height={500} alt=\"author\"/>. Config in next.config.js: remotePatterns, domains, loaderFile, deviceSizes, imageSizes, formats, minimumCacheTTL, disableStaticImages, dangerouslyAllowSVG, contentSecurityPolicy. Caching: optimized images stored in <distDir>/cache/images. NextResponse: Extends Web Response API. cookies: Read/mutate Set-Cookie header. set(name, value): Set a cookie. get(name): Get cookie value. getAll(name?): Get all cookies. delete(name): Delete cookie. json(body, init?): JSON response. redirect(url: URL | string, init?): Redirect response. rewrite(url: URL | string, init?): Rewrite response. next(init?): Continue routing in Middleware; init.request.headers to forward headers. Example: NextResponse.next({ request: { headers: newHeaders } }) for third-party scripts. strategies: beforeInteractive, afterInteractive, lazyOnload, worker(experimental). Inline scripts: . Event handlers: onLoad, onReady, onError. Additional attributes forwarded to Preview Mode enables draft content preview bypassing static generation. Use `res.setPreviewData(data)` in API route to enable. `getStaticProps(context)` is called at request time; `context.preview=true`, `context.previewData=data`. Secure API with secret. `res.clearPreviewData({path})` clears cookies. `setPreviewData({maxAge, path})` options. Data limit 2KB. Works with `getServerSideProps`, API Routes (`req.preview`, `req.previewData`). permanentRedirect(path, type): Redirects to another URL. path: URL to redirect to (string). type: 'replace' or 'push'. Throws NEXT_REDIRECT error, terminates rendering. Used in Server Components, Client Components, Route Handlers, and Server Actions. revalidateTag(tag: string): void; Purges cached data for a specific cache tag. Available in Node.js and Edge runtimes. Invalidates cache only when path is visited. tag: string; Case-sensitive, max 256 chars. Use fetch(url, { next: { tags: [...] } }) to add tags. Example: 'use server' import { revalidateTag } from 'next/cache' export default async function submit() { await addPost(); revalidateTag('posts') } `getStaticPaths`: Statically pre-renders paths for dynamic routes. Returns object with `paths` (array of params) and `fallback`. `getStaticProps` fetches data. `fallback: false` renders 404 for unmatched paths. `fallback: true` provides fallback page, dynamically generating on request. `fallback: 'blocking'` waits for HTML generation. getStaticProps: Pre-renders page at build time using returned props (Static Site Generation). Runs on server, not client. Called during `next build`. Called before initial render with fallback: blocking. Runs in background with fallback: true or revalidate. Does not have access to incoming request. Use if data available at build, from headless CMS, for SEO/speed, publicly cacheable. Returns: { props: object }. Example: export async function getStaticProps() { const res = await fetch('https://.../posts'); const posts = await res.json(); return { props: { posts } }; } Statically generates HTML and JSON. JSON used for client-side routing. Can only be exported from a page. Runs on every request in development. Bypass with Preview Mode. Middleware runs code before request completion. Modifies response: rewrite, redirect, headers. Runs before cache, routes. Use cases: Auth, Redirects, Rewriting, Bot Detection, Logging, Feature Flags. Limitations: No data fetching, heavy tasks, extensive session mgmt, direct DB ops (use Route Handlers). File: middleware.ts/js in project root. One file per project. Matching paths: matcher config or conditionals. NextResponse API: redirect(url), rewrite(url), requestHeaders, responseHeaders, cookies. cookies API: request.cookies: get(name), getAll(), set(name, value), delete(name), has(name), clear(). response.cookies: get(name), getAll(), set(name, value), delete(name). Set request/response headers with NextResponse. CORS headers in middleware. Respond directly from middleware: return Response/NextResponse. waitUntil(promise) extends middleware lifetime for background tasks. Advanced flags: skipTrailingSlashRedirect, skipMiddlewareUrlNormalize. Runtime: Edge only. v13.1.0: Advanced flags. v13.0.0: Modify req/res headers, send responses. v12.2.0: Stable. v12.0.0: Beta. getStaticPaths: Defines paths for dynamic routes with getStaticProps. Runs during build in production. Must be used with getStaticProps, not getServerSideProps. Example: export const getStaticPaths = async () => ({ paths: [{ params: { id: '1' } }], fallback: false }). Runs on every request in development (next dev). Generates paths on-demand with fallback. Allows skipping static generation for faster builds in preview environments: return { paths: [], fallback: 'blocking' }. Script component from next/script. Props: src: string (required, script URL), strategy: string ('beforeInteractive', 'afterInteractive' (default), 'lazyOnload', 'worker' (experimental)), onLoad: func (callback after load, 'afterInteractive', 'lazyOnload', Client Components), onReady: func (callback after load & mount, Client Components), onError: func (callback on error, Client Components). Strategies: beforeInteractive: load before hydration (Document Component), afterInteractive: load after hydration (default), lazyOnload: load on idle, worker: web worker (experimental, pages/, nextScriptWorkers: true). Warnings: worker experimental, onLoad/onReady/onError not Server Components, onLoad/onError not beforeInteractive. Script: Loads third-party scripts. Strategy: beforeInteractive, afterInteractive (default), lazyOnload, worker (experimental). worker uses Partytown (install @builder.io/partytown). Inline scripts: use {'js code'} or dangerouslySetInnerHTML={{ __html: 'js code' }}. Requires id. Event handlers: onLoad, onReady, onError (client component only). Additional attributes are forwarded. NextRequest: Extends Web Request API. cookies: Read/mutate Set-Cookie header. cookies.set(name, value): Set a cookie. cookies.get(name): Get cookie value or undefined. cookies.getAll(name?): Get all cookies. cookies.delete(name): Delete a cookie. cookies.has(name): Check if cookie exists. cookies.clear(): Remove Set-Cookie header. nextUrl: Extends URL API. nextUrl.pathname: URL pathname. nextUrl.searchParams: URL search parameters. Properties: basePath, buildId, defaultLocale, domainLocale, locales, locale, url. ip: IP address. geo: Geographic information (city, country, region, latitude, longitude). Migrating from Create React App to Next.js. Steps: 1. Install next: npm install next@latest. 2. Create next.config.mjs: output: 'export', distDir: './dist'. 3. Update tsconfig.json. 4. Create app/layout.tsx (root layout). 5. Metadata API. 6. Styles: Import CSS in layout.tsx. 7. Create app/[[...slug]]/page.tsx (entrypoint). 8. Update static image imports: <img src={logo.src} />. 9. Migrate env vars: REACT_APP_* to NEXT_PUBLIC_*. 10. Update package.json scripts: dev, build, start. 11. Clean up CRA artifacts."