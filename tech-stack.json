{
  "projectName": "Project Sentinel-QoS: An AI-Driven Framework for Dynamic Quality of Service Enforcement",
  "projectGoal": "To build a full-stack web application that allows a user to upload a CSV of network traffic data. The application will send this data to a Python backend, which uses a Large Language Model (LLM) to classify each traffic flow. The classification results will be displayed on the frontend.",
  "personas": {
    "frontendExpert": "Expert in TypeScript, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind.",
    "apiExpert": "Expert in Python, FastAPI, and scalable API development.",
    "aiExpert": "Expert in deep learning, LLMs, and Python, focusing on PyTorch, Transformers, and local inference with Ollama."
  },
  "techStack": {
    "frontend": "Next.js 14+, TypeScript, Shadcn UI, Tailwind CSS",
    "backend": "FastAPI (Python), Uvicorn",
    "ai": "Ollama with Mistral 7B model, 'ollama' Python library"
  },
  "architectureOverview": "A three-tier architecture: 1) A Next.js frontend for user interaction. 2) A FastAPI backend that provides a REST API. 3) An AI service layer in Python that communicates with a locally running LLM via Ollama for the core classification logic.",
  "developmentPlan": [
    {
      "phase": 1,
      "title": "Environment Setup & AI Core",
      "objective": "Set up the development environment and create the core AI logic for traffic classification.",
      "responsiblePersona": "aiExpert",
      "tasks": [
        {
          "task": "Install Ollama and pull the Mistral model",
          "instructions": "Download and install Ollama from ollama.com. Run 'ollama pull mistral' in the terminal to download the Mistral 7B model."
        },
        {
          "task": "Create the Python AI Classifier Script",
          "instructions": "Create a file named 'sentinel_ai_classifier.py'. Inside, write a Python function 'classify_traffic' that takes a dictionary representing a single row of network data as input. This function should: 1. Convert the numerical data into a human-readable string (the prompt). 2. Use the 'ollama' Python library to send this prompt to the 'mistral' model. 3. Request structured JSON output from the model (e.g., {'classification': 'Video Streaming'}). 4. Parse the response and return the classification string. Include robust error handling."
        },
        {
          "task": "Test the AI Classifier",
          "instructions": "Write a small test block under 'if __name__ == \"__main__\":' in the same file to call 'classify_traffic' with sample network data (e.g., {'avg_pkt_len': 1200, 'duration': 30, 'flow_bytes_s': 500000}) and print the result to ensure it works."
        }
      ]
    },
    {
      "phase": 2,
      "title": "Backend API Development",
      "objective": "Build the FastAPI server to expose the AI classification logic through a web endpoint.",
      "responsiblePersona": "apiExpert",
      "tasks": [
        {
          "task": "Set up FastAPI Project",
          "instructions": "Create a new directory for the backend. Set up a Python virtual environment. Install 'fastapi', 'uvicorn', and 'ollama'. Create a main file 'main.py'."
        },
        {
          "task": "Import the AI Classifier",
          "instructions": "Import the 'classify_traffic' function from 'sentinel_ai_classifier.py' into 'main.py'."
        },
        {
          "task": "Create Pydantic Models",
          "instructions": "Define two Pydantic models: 'TrafficDataInput' to validate the incoming network data row, and 'TrafficClassificationOutput' for the response."
        },
        {
          "task": "Create the API Endpoint",
          "instructions": "Create a FastAPI POST endpoint at '/classify'. This endpoint should: 1. Accept a list of 'TrafficDataInput' objects in the request body. 2. Iterate through the list, calling the 'classify_traffic' function for each item. 3. Collect the results. 4. Return a JSON response containing a list of 'TrafficClassificationOutput' objects. Ensure the endpoint is asynchronous ('async def')."
        },
        {
          "task": "Add CORS Middleware",
          "instructions": "Add CORS middleware to the FastAPI app to allow requests from the Next.js frontend (which will run on a different port during development)."
        }
      ]
    },
    {
      "phase": 3,
      "title": "Frontend Application Development",
      "objective": "Create the Next.js user interface for uploading data and displaying results.",
      "responsiblePersona": "frontendExpert",
      "tasks": [
        {
          "task": "Initialize Next.js Project",
          "instructions": "Create a new Next.js project with TypeScript and Tailwind CSS using 'create-next-app'. Use the App Router."
        },
        {
          "task": "Install Shadcn UI and Dependencies",
          "instructions": "Run 'npx shadcn-ui@latest init'. Then, add the following components: 'Button', 'Card', 'Table', and a file input component (you may need to build a simple one or use a library)."
        },
        {
          "task": "Build the Main Page UI",
          "instructions": "In 'app/page.tsx', create the UI layout. It should include: 1. A title 'Project Sentinel-QoS'. 2. A 'Card' component containing a file input for CSV files and a 'Button' for submitting. 3. A results area, initially hidden, that will contain a 'Table' to display the classifications."
        },
        {
          "task": "Implement File Upload and Parsing Logic",
          "instructions": "Create a client component ('use client') for the upload form. Use 'papaparse' to parse the uploaded CSV file into a JSON array in the browser when the user selects a file."
        },
        {
          "task": "Create Server Action for API Call",
          "instructions": "Create a Next.js Server Action that will be called when the form is submitted. This action will: 1. Accept the parsed JSON data as an argument. 2. Use 'fetch' to make a POST request to the FastAPI backend's '/classify' endpoint. 3. Handle the response, including potential errors. 4. Return the classification data to the client component."
        },
        {
          "task": "Implement State Management and Display Results",
          "instructions": "In the client component, manage the application's state (e.g., file data, loading status, results, errors). When the Server Action returns the classification data, update the state and render the results in the 'Table' component. The table should show the original data alongside the new 'classification' column."
        }
      ]
    }
  ]
}